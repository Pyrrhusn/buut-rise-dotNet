@using Rise.Client.Common
@typeparam T

@* TODO check mobile view *@
@* TODO limit loader to show up only after 1 second *@
@if (ShowLoader())
{
    @InfoContainerContent(LoadingContent(TestIdLoading()))
}
else
{
    <MudStack Spacing="4">
    @if (HasError)
    {
        @if (ShowStaticAlert())
        {
            @InfoContainerContent(ErrorContent(ErrorMessageContent((ErrorMessage, TestIdError()))))
        }
        @if (ShowSnackBarAlert())
        {
            DisplayErrorOnSnackbar();
        }
    }

        @if (ShowContent())
    {
        @ChildContent
    }
    </MudStack>
}

@code {
    [Parameter]
    public RenderFragment<RenderFragment?> InfoContainerContent { get; set; } =
        (RenderFragment? content) =>
    @<MudContainer Class="d-flex justify-center">
        @content
    </MudContainer>;

    [Parameter]
    public RenderFragment<string> LoadingContent { get; set; } = (string testId) => @<MudProgressCircular Indeterminate="true" data-testid="@testId" />;

    [Parameter]
    public RenderFragment<(string? errorMessage, string testId)> ErrorMessageContent { get; set; } = (context) => @<MudText
        Typo="Typo.body1" data-testid="@context.testId">
        @context.errorMessage</MudText>;

    [Parameter]
    public RenderFragment<RenderFragment> ErrorContent
    { get; set; }
        = (RenderFragment errorMessageContent) => @<MudAlert Severity="Severity.Error">
        @errorMessageContent</MudAlert>;

    [Parameter, EditorRequired]
    public required RenderFragment ChildContent { get; set; }
    protected void DisplayErrorOnSnackbar()
    {
        SnackbarService.Add(ErrorMessageContent((ErrorMessage, TestIdError())), Severity.Error);
    }
}
